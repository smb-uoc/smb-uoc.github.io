{"mappings":"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","sources":["<anon>","node_modules/vanilla-tilt/dist/vanilla-tilt.js"],"sourcesContent":["var VanillaTilt = function() {\n    \"use strict\";\n    /**\r\n * Created by Sergiu Șandor (micku7zu) on 1/27/2017.\r\n * Original idea: https://github.com/gijsroge/tilt.js\r\n * MIT License.\r\n * Version 1.8.1\r\n */ class VanillaTilt {\n        constructor(element, settings = {}){\n            if (!(element instanceof Node)) throw \"Can't initialize VanillaTilt because \" + element + \" is not a Node.\";\n            this.width = null;\n            this.height = null;\n            this.clientWidth = null;\n            this.clientHeight = null;\n            this.left = null;\n            this.top = null;\n            // for Gyroscope sampling\n            this.gammazero = null;\n            this.betazero = null;\n            this.lastgammazero = null;\n            this.lastbetazero = null;\n            this.transitionTimeout = null;\n            this.updateCall = null;\n            this.event = null;\n            this.updateBind = this.update.bind(this);\n            this.resetBind = this.reset.bind(this);\n            this.element = element;\n            this.settings = this.extendSettings(settings);\n            this.reverse = this.settings.reverse ? -1 : 1;\n            this.resetToStart = VanillaTilt.isSettingTrue(this.settings[\"reset-to-start\"]);\n            this.glare = VanillaTilt.isSettingTrue(this.settings.glare);\n            this.glarePrerender = VanillaTilt.isSettingTrue(this.settings[\"glare-prerender\"]);\n            this.fullPageListening = VanillaTilt.isSettingTrue(this.settings[\"full-page-listening\"]);\n            this.gyroscope = VanillaTilt.isSettingTrue(this.settings.gyroscope);\n            this.gyroscopeSamples = this.settings.gyroscopeSamples;\n            this.elementListener = this.getElementListener();\n            if (this.glare) this.prepareGlare();\n            if (this.fullPageListening) this.updateClientSize();\n            this.addEventListeners();\n            this.reset();\n            if (this.resetToStart === false) {\n                this.settings.startX = 0;\n                this.settings.startY = 0;\n            }\n        }\n        static isSettingTrue(setting) {\n            return setting === \"\" || setting === true || setting === 1;\n        }\n        /**\r\n   * Method returns element what will be listen mouse events\r\n   * @return {Node}\r\n   */ getElementListener() {\n            if (this.fullPageListening) return window.document;\n            if (typeof this.settings[\"mouse-event-element\"] === \"string\") {\n                const mouseEventElement = document.querySelector(this.settings[\"mouse-event-element\"]);\n                if (mouseEventElement) return mouseEventElement;\n            }\n            if (this.settings[\"mouse-event-element\"] instanceof Node) return this.settings[\"mouse-event-element\"];\n            return this.element;\n        }\n        /**\r\n   * Method set listen methods for this.elementListener\r\n   * @return {Node}\r\n   */ addEventListeners() {\n            this.onMouseEnterBind = this.onMouseEnter.bind(this);\n            this.onMouseMoveBind = this.onMouseMove.bind(this);\n            this.onMouseLeaveBind = this.onMouseLeave.bind(this);\n            this.onWindowResizeBind = this.onWindowResize.bind(this);\n            this.onDeviceOrientationBind = this.onDeviceOrientation.bind(this);\n            this.elementListener.addEventListener(\"mouseenter\", this.onMouseEnterBind);\n            this.elementListener.addEventListener(\"mouseleave\", this.onMouseLeaveBind);\n            this.elementListener.addEventListener(\"mousemove\", this.onMouseMoveBind);\n            if (this.glare || this.fullPageListening) window.addEventListener(\"resize\", this.onWindowResizeBind);\n            if (this.gyroscope) window.addEventListener(\"deviceorientation\", this.onDeviceOrientationBind);\n        }\n        /**\r\n   * Method remove event listeners from current this.elementListener\r\n   */ removeEventListeners() {\n            this.elementListener.removeEventListener(\"mouseenter\", this.onMouseEnterBind);\n            this.elementListener.removeEventListener(\"mouseleave\", this.onMouseLeaveBind);\n            this.elementListener.removeEventListener(\"mousemove\", this.onMouseMoveBind);\n            if (this.gyroscope) window.removeEventListener(\"deviceorientation\", this.onDeviceOrientationBind);\n            if (this.glare || this.fullPageListening) window.removeEventListener(\"resize\", this.onWindowResizeBind);\n        }\n        destroy() {\n            clearTimeout(this.transitionTimeout);\n            if (this.updateCall !== null) cancelAnimationFrame(this.updateCall);\n            this.element.style.willChange = \"\";\n            this.element.style.transition = \"\";\n            this.element.style.transform = \"\";\n            this.resetGlare();\n            this.removeEventListeners();\n            this.element.vanillaTilt = null;\n            delete this.element.vanillaTilt;\n            this.element = null;\n        }\n        onDeviceOrientation(event) {\n            if (event.gamma === null || event.beta === null) return;\n            this.updateElementPosition();\n            if (this.gyroscopeSamples > 0) {\n                this.lastgammazero = this.gammazero;\n                this.lastbetazero = this.betazero;\n                if (this.gammazero === null) {\n                    this.gammazero = event.gamma;\n                    this.betazero = event.beta;\n                } else {\n                    this.gammazero = (event.gamma + this.lastgammazero) / 2;\n                    this.betazero = (event.beta + this.lastbetazero) / 2;\n                }\n                this.gyroscopeSamples -= 1;\n            }\n            const totalAngleX = this.settings.gyroscopeMaxAngleX - this.settings.gyroscopeMinAngleX;\n            const totalAngleY = this.settings.gyroscopeMaxAngleY - this.settings.gyroscopeMinAngleY;\n            const degreesPerPixelX = totalAngleX / this.width;\n            const degreesPerPixelY = totalAngleY / this.height;\n            const angleX = event.gamma - (this.settings.gyroscopeMinAngleX + this.gammazero);\n            const angleY = event.beta - (this.settings.gyroscopeMinAngleY + this.betazero);\n            const posX = angleX / degreesPerPixelX;\n            const posY = angleY / degreesPerPixelY;\n            if (this.updateCall !== null) cancelAnimationFrame(this.updateCall);\n            this.event = {\n                clientX: posX + this.left,\n                clientY: posY + this.top\n            };\n            this.updateCall = requestAnimationFrame(this.updateBind);\n        }\n        onMouseEnter() {\n            this.updateElementPosition();\n            this.element.style.willChange = \"transform\";\n            this.setTransition();\n        }\n        onMouseMove(event) {\n            if (this.updateCall !== null) cancelAnimationFrame(this.updateCall);\n            this.event = event;\n            this.updateCall = requestAnimationFrame(this.updateBind);\n        }\n        onMouseLeave() {\n            this.setTransition();\n            if (this.settings.reset) requestAnimationFrame(this.resetBind);\n        }\n        reset() {\n            this.onMouseEnter();\n            if (this.fullPageListening) this.event = {\n                clientX: (this.settings.startX + this.settings.max) / (2 * this.settings.max) * this.clientWidth,\n                clientY: (this.settings.startY + this.settings.max) / (2 * this.settings.max) * this.clientHeight\n            };\n            else this.event = {\n                clientX: this.left + (this.settings.startX + this.settings.max) / (2 * this.settings.max) * this.width,\n                clientY: this.top + (this.settings.startY + this.settings.max) / (2 * this.settings.max) * this.height\n            };\n            let backupScale = this.settings.scale;\n            this.settings.scale = 1;\n            this.update();\n            this.settings.scale = backupScale;\n            this.resetGlare();\n        }\n        resetGlare() {\n            if (this.glare) {\n                this.glareElement.style.transform = \"rotate(180deg) translate(-50%, -50%)\";\n                this.glareElement.style.opacity = \"0\";\n            }\n        }\n        getValues() {\n            let x, y;\n            if (this.fullPageListening) {\n                x = this.event.clientX / this.clientWidth;\n                y = this.event.clientY / this.clientHeight;\n            } else {\n                x = (this.event.clientX - this.left) / this.width;\n                y = (this.event.clientY - this.top) / this.height;\n            }\n            x = Math.min(Math.max(x, 0), 1);\n            y = Math.min(Math.max(y, 0), 1);\n            let tiltX = (this.reverse * (this.settings.max - x * this.settings.max * 2)).toFixed(2);\n            let tiltY = (this.reverse * (y * this.settings.max * 2 - this.settings.max)).toFixed(2);\n            let angle = Math.atan2(this.event.clientX - (this.left + this.width / 2), -(this.event.clientY - (this.top + this.height / 2))) * (180 / Math.PI);\n            return {\n                tiltX: tiltX,\n                tiltY: tiltY,\n                percentageX: x * 100,\n                percentageY: y * 100,\n                angle: angle\n            };\n        }\n        updateElementPosition() {\n            let rect = this.element.getBoundingClientRect();\n            this.width = this.element.offsetWidth;\n            this.height = this.element.offsetHeight;\n            this.left = rect.left;\n            this.top = rect.top;\n        }\n        update() {\n            let values = this.getValues();\n            this.element.style.transform = \"perspective(\" + this.settings.perspective + \"px) \" + \"rotateX(\" + (this.settings.axis === \"x\" ? 0 : values.tiltY) + \"deg) \" + \"rotateY(\" + (this.settings.axis === \"y\" ? 0 : values.tiltX) + \"deg) \" + \"scale3d(\" + this.settings.scale + \", \" + this.settings.scale + \", \" + this.settings.scale + \")\";\n            if (this.glare) {\n                this.glareElement.style.transform = `rotate(${values.angle}deg) translate(-50%, -50%)`;\n                this.glareElement.style.opacity = `${values.percentageY * this.settings[\"max-glare\"] / 100}`;\n            }\n            this.element.dispatchEvent(new CustomEvent(\"tiltChange\", {\n                \"detail\": values\n            }));\n            this.updateCall = null;\n        }\n        /**\r\n   * Appends the glare element (if glarePrerender equals false)\r\n   * and sets the default style\r\n   */ prepareGlare() {\n            // If option pre-render is enabled we assume all html/css is present for an optimal glare effect.\n            if (!this.glarePrerender) {\n                // Create glare element\n                const jsTiltGlare = document.createElement(\"div\");\n                jsTiltGlare.classList.add(\"js-tilt-glare\");\n                const jsTiltGlareInner = document.createElement(\"div\");\n                jsTiltGlareInner.classList.add(\"js-tilt-glare-inner\");\n                jsTiltGlare.appendChild(jsTiltGlareInner);\n                this.element.appendChild(jsTiltGlare);\n            }\n            this.glareElementWrapper = this.element.querySelector(\".js-tilt-glare\");\n            this.glareElement = this.element.querySelector(\".js-tilt-glare-inner\");\n            if (this.glarePrerender) return;\n            Object.assign(this.glareElementWrapper.style, {\n                \"position\": \"absolute\",\n                \"top\": \"0\",\n                \"left\": \"0\",\n                \"width\": \"100%\",\n                \"height\": \"100%\",\n                \"overflow\": \"hidden\",\n                \"pointer-events\": \"none\",\n                \"border-radius\": \"inherit\"\n            });\n            Object.assign(this.glareElement.style, {\n                \"position\": \"absolute\",\n                \"top\": \"50%\",\n                \"left\": \"50%\",\n                \"pointer-events\": \"none\",\n                \"background-image\": `linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)`,\n                \"transform\": \"rotate(180deg) translate(-50%, -50%)\",\n                \"transform-origin\": \"0% 0%\",\n                \"opacity\": \"0\"\n            });\n            this.updateGlareSize();\n        }\n        updateGlareSize() {\n            if (this.glare) {\n                const glareSize = (this.element.offsetWidth > this.element.offsetHeight ? this.element.offsetWidth : this.element.offsetHeight) * 2;\n                Object.assign(this.glareElement.style, {\n                    \"width\": `${glareSize}px`,\n                    \"height\": `${glareSize}px`\n                });\n            }\n        }\n        updateClientSize() {\n            this.clientWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            this.clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n        }\n        onWindowResize() {\n            this.updateGlareSize();\n            this.updateClientSize();\n        }\n        setTransition() {\n            clearTimeout(this.transitionTimeout);\n            this.element.style.transition = this.settings.speed + \"ms \" + this.settings.easing;\n            if (this.glare) this.glareElement.style.transition = `opacity ${this.settings.speed}ms ${this.settings.easing}`;\n            this.transitionTimeout = setTimeout(()=>{\n                this.element.style.transition = \"\";\n                if (this.glare) this.glareElement.style.transition = \"\";\n            }, this.settings.speed);\n        }\n        /**\r\n   * Method return patched settings of instance\r\n   * @param {boolean} settings.reverse - reverse the tilt direction\r\n   * @param {number} settings.max - max tilt rotation (degrees)\r\n   * @param {startX} settings.startX - the starting tilt on the X axis, in degrees. Default: 0\r\n   * @param {startY} settings.startY - the starting tilt on the Y axis, in degrees. Default: 0\r\n   * @param {number} settings.perspective - Transform perspective, the lower the more extreme the tilt gets\r\n   * @param {string} settings.easing - Easing on enter/exit\r\n   * @param {number} settings.scale - 2 = 200%, 1.5 = 150%, etc..\r\n   * @param {number} settings.speed - Speed of the enter/exit transition\r\n   * @param {boolean} settings.transition - Set a transition on enter/exit\r\n   * @param {string|null} settings.axis - What axis should be enabled. Can be \"x\" or \"y\"\r\n   * @param {boolean} settings.glare - if it should have a \"glare\" effect\r\n   * @param {number} settings.max-glare - the maximum \"glare\" opacity (1 = 100%, 0.5 = 50%)\r\n   * @param {boolean} settings.glare-prerender - false = VanillaTilt creates the glare elements for you, otherwise\r\n   * @param {boolean} settings.full-page-listening - If true, parallax effect will listen to mouse move events on the whole document, not only the selected element\r\n   * @param {string|object} settings.mouse-event-element - String selector or link to HTML-element what will be listen mouse events\r\n   * @param {boolean} settings.reset - false = If the tilt effect has to be reset on exit\r\n   * @param {boolean} settings.reset-to-start - true = On reset event (mouse leave) will return to initial start angle (if startX or startY is set)\r\n   * @param {gyroscope} settings.gyroscope - Enable tilting by deviceorientation events\r\n   * @param {gyroscopeSensitivity} settings.gyroscopeSensitivity - Between 0 and 1 - The angle at which max tilt position is reached. 1 = 90deg, 0.5 = 45deg, etc..\r\n   * @param {gyroscopeSamples} settings.gyroscopeSamples - How many gyroscope moves to decide the starting position.\r\n   */ extendSettings(settings) {\n            let defaultSettings = {\n                reverse: false,\n                max: 15,\n                startX: 0,\n                startY: 0,\n                perspective: 1000,\n                easing: \"cubic-bezier(.03,.98,.52,.99)\",\n                scale: 1,\n                speed: 300,\n                transition: true,\n                axis: null,\n                glare: false,\n                \"max-glare\": 1,\n                \"glare-prerender\": false,\n                \"full-page-listening\": false,\n                \"mouse-event-element\": null,\n                reset: true,\n                \"reset-to-start\": true,\n                gyroscope: true,\n                gyroscopeMinAngleX: -45,\n                gyroscopeMaxAngleX: 45,\n                gyroscopeMinAngleY: -45,\n                gyroscopeMaxAngleY: 45,\n                gyroscopeSamples: 10\n            };\n            let newSettings = {};\n            for(var property in defaultSettings){\n                if (property in settings) newSettings[property] = settings[property];\n                else if (this.element.hasAttribute(\"data-tilt-\" + property)) {\n                    let attribute = this.element.getAttribute(\"data-tilt-\" + property);\n                    try {\n                        newSettings[property] = JSON.parse(attribute);\n                    } catch (e) {\n                        newSettings[property] = attribute;\n                    }\n                } else newSettings[property] = defaultSettings[property];\n            }\n            return newSettings;\n        }\n        static init(elements, settings) {\n            if (elements instanceof Node) elements = [\n                elements\n            ];\n            if (elements instanceof NodeList) elements = [].slice.call(elements);\n            if (!(elements instanceof Array)) return;\n            elements.forEach((element)=>{\n                if (!(\"vanillaTilt\" in element)) element.vanillaTilt = new VanillaTilt(element, settings);\n            });\n        }\n    }\n    if (typeof document !== \"undefined\") {\n        /* expose the class to window */ window.VanillaTilt = VanillaTilt;\n        /**\r\n   * Auto load\r\n   */ VanillaTilt.init(document.querySelectorAll(\"[data-tilt]\"));\n    }\n    return VanillaTilt;\n}();\n\n//# sourceMappingURL=index.0431c69b.js.map\n","var VanillaTilt = (function () {\n'use strict';\n\n/**\r\n * Created by Sergiu Șandor (micku7zu) on 1/27/2017.\r\n * Original idea: https://github.com/gijsroge/tilt.js\r\n * MIT License.\r\n * Version 1.8.1\r\n */\r\n\r\nclass VanillaTilt {\r\n  constructor(element, settings = {}) {\r\n    if (!(element instanceof Node)) {\r\n      throw (\"Can't initialize VanillaTilt because \" + element + \" is not a Node.\");\r\n    }\r\n\r\n    this.width = null;\r\n    this.height = null;\r\n    this.clientWidth = null;\r\n    this.clientHeight = null;\r\n    this.left = null;\r\n    this.top = null;\r\n\r\n    // for Gyroscope sampling\r\n    this.gammazero = null;\r\n    this.betazero = null;\r\n    this.lastgammazero = null;\r\n    this.lastbetazero = null;\r\n\r\n    this.transitionTimeout = null;\r\n    this.updateCall = null;\r\n    this.event = null;\r\n\r\n    this.updateBind = this.update.bind(this);\r\n    this.resetBind = this.reset.bind(this);\r\n\r\n    this.element = element;\r\n    this.settings = this.extendSettings(settings);\r\n\r\n    this.reverse = this.settings.reverse ? -1 : 1;\r\n    this.resetToStart = VanillaTilt.isSettingTrue(this.settings[\"reset-to-start\"]);\r\n    this.glare = VanillaTilt.isSettingTrue(this.settings.glare);\r\n    this.glarePrerender = VanillaTilt.isSettingTrue(this.settings[\"glare-prerender\"]);\r\n    this.fullPageListening = VanillaTilt.isSettingTrue(this.settings[\"full-page-listening\"]);\r\n    this.gyroscope = VanillaTilt.isSettingTrue(this.settings.gyroscope);\r\n    this.gyroscopeSamples = this.settings.gyroscopeSamples;\r\n\r\n    this.elementListener = this.getElementListener();\r\n\r\n    if (this.glare) {\r\n      this.prepareGlare();\r\n    }\r\n\r\n    if (this.fullPageListening) {\r\n      this.updateClientSize();\r\n    }\r\n\r\n    this.addEventListeners();\r\n    this.reset();\r\n\r\n    if (this.resetToStart === false) {\r\n      this.settings.startX = 0;\r\n      this.settings.startY = 0;\r\n    }\r\n  }\r\n\r\n  static isSettingTrue(setting) {\r\n    return setting === \"\" || setting === true || setting === 1;\r\n  }\r\n\r\n  /**\r\n   * Method returns element what will be listen mouse events\r\n   * @return {Node}\r\n   */\r\n  getElementListener() {\r\n    if (this.fullPageListening) {\r\n      return window.document;\r\n    }\r\n\r\n    if (typeof this.settings[\"mouse-event-element\"] === \"string\") {\r\n      const mouseEventElement = document.querySelector(this.settings[\"mouse-event-element\"]);\r\n\r\n      if (mouseEventElement) {\r\n        return mouseEventElement;\r\n      }\r\n    }\r\n\r\n    if (this.settings[\"mouse-event-element\"] instanceof Node) {\r\n      return this.settings[\"mouse-event-element\"];\r\n    }\r\n\r\n    return this.element;\r\n  }\r\n\r\n  /**\r\n   * Method set listen methods for this.elementListener\r\n   * @return {Node}\r\n   */\r\n  addEventListeners() {\r\n    this.onMouseEnterBind = this.onMouseEnter.bind(this);\r\n    this.onMouseMoveBind = this.onMouseMove.bind(this);\r\n    this.onMouseLeaveBind = this.onMouseLeave.bind(this);\r\n    this.onWindowResizeBind = this.onWindowResize.bind(this);\r\n    this.onDeviceOrientationBind = this.onDeviceOrientation.bind(this);\r\n\r\n    this.elementListener.addEventListener(\"mouseenter\", this.onMouseEnterBind);\r\n    this.elementListener.addEventListener(\"mouseleave\", this.onMouseLeaveBind);\r\n    this.elementListener.addEventListener(\"mousemove\", this.onMouseMoveBind);\r\n\r\n    if (this.glare || this.fullPageListening) {\r\n      window.addEventListener(\"resize\", this.onWindowResizeBind);\r\n    }\r\n\r\n    if (this.gyroscope) {\r\n      window.addEventListener(\"deviceorientation\", this.onDeviceOrientationBind);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method remove event listeners from current this.elementListener\r\n   */\r\n  removeEventListeners() {\r\n    this.elementListener.removeEventListener(\"mouseenter\", this.onMouseEnterBind);\r\n    this.elementListener.removeEventListener(\"mouseleave\", this.onMouseLeaveBind);\r\n    this.elementListener.removeEventListener(\"mousemove\", this.onMouseMoveBind);\r\n\r\n    if (this.gyroscope) {\r\n      window.removeEventListener(\"deviceorientation\", this.onDeviceOrientationBind);\r\n    }\r\n\r\n    if (this.glare || this.fullPageListening) {\r\n      window.removeEventListener(\"resize\", this.onWindowResizeBind);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    clearTimeout(this.transitionTimeout);\r\n    if (this.updateCall !== null) {\r\n      cancelAnimationFrame(this.updateCall);\r\n    }\r\n\r\n    this.element.style.willChange = \"\";\r\n    this.element.style.transition = \"\";\r\n    this.element.style.transform = \"\";\r\n    this.resetGlare();\r\n\r\n    this.removeEventListeners();\r\n    this.element.vanillaTilt = null;\r\n    delete this.element.vanillaTilt;\r\n\r\n    this.element = null;\r\n  }\r\n\r\n  onDeviceOrientation(event) {\r\n    if (event.gamma === null || event.beta === null) {\r\n      return;\r\n    }\r\n\r\n    this.updateElementPosition();\r\n\r\n    if (this.gyroscopeSamples > 0) {\r\n      this.lastgammazero = this.gammazero;\r\n      this.lastbetazero = this.betazero;\r\n\r\n      if (this.gammazero === null) {\r\n        this.gammazero = event.gamma;\r\n        this.betazero = event.beta;\r\n      } else {\r\n        this.gammazero = (event.gamma + this.lastgammazero) / 2;\r\n        this.betazero = (event.beta + this.lastbetazero) / 2;\r\n      }\r\n\r\n      this.gyroscopeSamples -= 1;\r\n    }\r\n\r\n    const totalAngleX = this.settings.gyroscopeMaxAngleX - this.settings.gyroscopeMinAngleX;\r\n    const totalAngleY = this.settings.gyroscopeMaxAngleY - this.settings.gyroscopeMinAngleY;\r\n\r\n    const degreesPerPixelX = totalAngleX / this.width;\r\n    const degreesPerPixelY = totalAngleY / this.height;\r\n\r\n    const angleX = event.gamma - (this.settings.gyroscopeMinAngleX + this.gammazero);\r\n    const angleY = event.beta - (this.settings.gyroscopeMinAngleY + this.betazero);\r\n\r\n    const posX = angleX / degreesPerPixelX;\r\n    const posY = angleY / degreesPerPixelY;\r\n\r\n    if (this.updateCall !== null) {\r\n      cancelAnimationFrame(this.updateCall);\r\n    }\r\n\r\n    this.event = {\r\n      clientX: posX + this.left,\r\n      clientY: posY + this.top,\r\n    };\r\n\r\n    this.updateCall = requestAnimationFrame(this.updateBind);\r\n  }\r\n\r\n  onMouseEnter() {\r\n    this.updateElementPosition();\r\n    this.element.style.willChange = \"transform\";\r\n    this.setTransition();\r\n  }\r\n\r\n  onMouseMove(event) {\r\n    if (this.updateCall !== null) {\r\n      cancelAnimationFrame(this.updateCall);\r\n    }\r\n\r\n    this.event = event;\r\n    this.updateCall = requestAnimationFrame(this.updateBind);\r\n  }\r\n\r\n  onMouseLeave() {\r\n    this.setTransition();\r\n\r\n    if (this.settings.reset) {\r\n      requestAnimationFrame(this.resetBind);\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this.onMouseEnter();\r\n\r\n    if (this.fullPageListening) {\r\n      this.event = {\r\n        clientX: (this.settings.startX + this.settings.max) / (2 * this.settings.max) * this.clientWidth,\r\n        clientY: (this.settings.startY + this.settings.max) / (2 * this.settings.max) * this.clientHeight\r\n      };\r\n    } else {\r\n      this.event = {\r\n        clientX: this.left + ((this.settings.startX + this.settings.max) / (2 * this.settings.max) * this.width),\r\n        clientY: this.top + ((this.settings.startY + this.settings.max) / (2 * this.settings.max) * this.height)\r\n      };\r\n    }\r\n\r\n    let backupScale = this.settings.scale;\r\n    this.settings.scale = 1;\r\n    this.update();\r\n    this.settings.scale = backupScale;\r\n    this.resetGlare();\r\n  }\r\n\r\n  resetGlare() {\r\n    if (this.glare) {\r\n      this.glareElement.style.transform = \"rotate(180deg) translate(-50%, -50%)\";\r\n      this.glareElement.style.opacity = \"0\";\r\n    }\r\n  }\r\n\r\n  getValues() {\r\n    let x, y;\r\n\r\n    if (this.fullPageListening) {\r\n      x = this.event.clientX / this.clientWidth;\r\n      y = this.event.clientY / this.clientHeight;\r\n    } else {\r\n      x = (this.event.clientX - this.left) / this.width;\r\n      y = (this.event.clientY - this.top) / this.height;\r\n    }\r\n\r\n    x = Math.min(Math.max(x, 0), 1);\r\n    y = Math.min(Math.max(y, 0), 1);\r\n\r\n    let tiltX = (this.reverse * (this.settings.max - x * this.settings.max * 2)).toFixed(2);\r\n    let tiltY = (this.reverse * (y * this.settings.max * 2 - this.settings.max)).toFixed(2);\r\n    let angle = Math.atan2(this.event.clientX - (this.left + this.width / 2), -(this.event.clientY - (this.top + this.height / 2))) * (180 / Math.PI);\r\n\r\n    return {\r\n      tiltX: tiltX,\r\n      tiltY: tiltY,\r\n      percentageX: x * 100,\r\n      percentageY: y * 100,\r\n      angle: angle\r\n    };\r\n  }\r\n\r\n  updateElementPosition() {\r\n    let rect = this.element.getBoundingClientRect();\r\n\r\n    this.width = this.element.offsetWidth;\r\n    this.height = this.element.offsetHeight;\r\n    this.left = rect.left;\r\n    this.top = rect.top;\r\n  }\r\n\r\n  update() {\r\n    let values = this.getValues();\r\n\r\n    this.element.style.transform = \"perspective(\" + this.settings.perspective + \"px) \" +\r\n      \"rotateX(\" + (this.settings.axis === \"x\" ? 0 : values.tiltY) + \"deg) \" +\r\n      \"rotateY(\" + (this.settings.axis === \"y\" ? 0 : values.tiltX) + \"deg) \" +\r\n      \"scale3d(\" + this.settings.scale + \", \" + this.settings.scale + \", \" + this.settings.scale + \")\";\r\n\r\n    if (this.glare) {\r\n      this.glareElement.style.transform = `rotate(${values.angle}deg) translate(-50%, -50%)`;\r\n      this.glareElement.style.opacity = `${values.percentageY * this.settings[\"max-glare\"] / 100}`;\r\n    }\r\n\r\n    this.element.dispatchEvent(new CustomEvent(\"tiltChange\", {\r\n      \"detail\": values\r\n    }));\r\n\r\n    this.updateCall = null;\r\n  }\r\n\r\n  /**\r\n   * Appends the glare element (if glarePrerender equals false)\r\n   * and sets the default style\r\n   */\r\n  prepareGlare() {\r\n    // If option pre-render is enabled we assume all html/css is present for an optimal glare effect.\r\n    if (!this.glarePrerender) {\r\n      // Create glare element\r\n      const jsTiltGlare = document.createElement(\"div\");\r\n      jsTiltGlare.classList.add(\"js-tilt-glare\");\r\n\r\n      const jsTiltGlareInner = document.createElement(\"div\");\r\n      jsTiltGlareInner.classList.add(\"js-tilt-glare-inner\");\r\n\r\n      jsTiltGlare.appendChild(jsTiltGlareInner);\r\n      this.element.appendChild(jsTiltGlare);\r\n    }\r\n\r\n    this.glareElementWrapper = this.element.querySelector(\".js-tilt-glare\");\r\n    this.glareElement = this.element.querySelector(\".js-tilt-glare-inner\");\r\n\r\n    if (this.glarePrerender) {\r\n      return;\r\n    }\r\n\r\n    Object.assign(this.glareElementWrapper.style, {\r\n      \"position\": \"absolute\",\r\n      \"top\": \"0\",\r\n      \"left\": \"0\",\r\n      \"width\": \"100%\",\r\n      \"height\": \"100%\",\r\n      \"overflow\": \"hidden\",\r\n      \"pointer-events\": \"none\",\r\n      \"border-radius\": \"inherit\"\r\n    });\r\n\r\n    Object.assign(this.glareElement.style, {\r\n      \"position\": \"absolute\",\r\n      \"top\": \"50%\",\r\n      \"left\": \"50%\",\r\n      \"pointer-events\": \"none\",\r\n      \"background-image\": `linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)`,\r\n      \"transform\": \"rotate(180deg) translate(-50%, -50%)\",\r\n      \"transform-origin\": \"0% 0%\",\r\n      \"opacity\": \"0\"\r\n    });\r\n\r\n    this.updateGlareSize();\r\n  }\r\n\r\n  updateGlareSize() {\r\n    if (this.glare) {\r\n      const glareSize = (this.element.offsetWidth > this.element.offsetHeight ? this.element.offsetWidth : this.element.offsetHeight) * 2;\r\n\r\n      Object.assign(this.glareElement.style, {\r\n        \"width\": `${glareSize}px`,\r\n        \"height\": `${glareSize}px`,\r\n      });\r\n    }\r\n  }\r\n\r\n  updateClientSize() {\r\n    this.clientWidth = window.innerWidth\r\n      || document.documentElement.clientWidth\r\n      || document.body.clientWidth;\r\n\r\n    this.clientHeight = window.innerHeight\r\n      || document.documentElement.clientHeight\r\n      || document.body.clientHeight;\r\n  }\r\n\r\n  onWindowResize() {\r\n    this.updateGlareSize();\r\n    this.updateClientSize();\r\n  }\r\n\r\n  setTransition() {\r\n    clearTimeout(this.transitionTimeout);\r\n    this.element.style.transition = this.settings.speed + \"ms \" + this.settings.easing;\r\n    if (this.glare) this.glareElement.style.transition = `opacity ${this.settings.speed}ms ${this.settings.easing}`;\r\n\r\n    this.transitionTimeout = setTimeout(() => {\r\n      this.element.style.transition = \"\";\r\n      if (this.glare) {\r\n        this.glareElement.style.transition = \"\";\r\n      }\r\n    }, this.settings.speed);\r\n\r\n  }\r\n\r\n  /**\r\n   * Method return patched settings of instance\r\n   * @param {boolean} settings.reverse - reverse the tilt direction\r\n   * @param {number} settings.max - max tilt rotation (degrees)\r\n   * @param {startX} settings.startX - the starting tilt on the X axis, in degrees. Default: 0\r\n   * @param {startY} settings.startY - the starting tilt on the Y axis, in degrees. Default: 0\r\n   * @param {number} settings.perspective - Transform perspective, the lower the more extreme the tilt gets\r\n   * @param {string} settings.easing - Easing on enter/exit\r\n   * @param {number} settings.scale - 2 = 200%, 1.5 = 150%, etc..\r\n   * @param {number} settings.speed - Speed of the enter/exit transition\r\n   * @param {boolean} settings.transition - Set a transition on enter/exit\r\n   * @param {string|null} settings.axis - What axis should be enabled. Can be \"x\" or \"y\"\r\n   * @param {boolean} settings.glare - if it should have a \"glare\" effect\r\n   * @param {number} settings.max-glare - the maximum \"glare\" opacity (1 = 100%, 0.5 = 50%)\r\n   * @param {boolean} settings.glare-prerender - false = VanillaTilt creates the glare elements for you, otherwise\r\n   * @param {boolean} settings.full-page-listening - If true, parallax effect will listen to mouse move events on the whole document, not only the selected element\r\n   * @param {string|object} settings.mouse-event-element - String selector or link to HTML-element what will be listen mouse events\r\n   * @param {boolean} settings.reset - false = If the tilt effect has to be reset on exit\r\n   * @param {boolean} settings.reset-to-start - true = On reset event (mouse leave) will return to initial start angle (if startX or startY is set)\r\n   * @param {gyroscope} settings.gyroscope - Enable tilting by deviceorientation events\r\n   * @param {gyroscopeSensitivity} settings.gyroscopeSensitivity - Between 0 and 1 - The angle at which max tilt position is reached. 1 = 90deg, 0.5 = 45deg, etc..\r\n   * @param {gyroscopeSamples} settings.gyroscopeSamples - How many gyroscope moves to decide the starting position.\r\n   */\r\n  extendSettings(settings) {\r\n    let defaultSettings = {\r\n      reverse: false,\r\n      max: 15,\r\n      startX: 0,\r\n      startY: 0,\r\n      perspective: 1000,\r\n      easing: \"cubic-bezier(.03,.98,.52,.99)\",\r\n      scale: 1,\r\n      speed: 300,\r\n      transition: true,\r\n      axis: null,\r\n      glare: false,\r\n      \"max-glare\": 1,\r\n      \"glare-prerender\": false,\r\n      \"full-page-listening\": false,\r\n      \"mouse-event-element\": null,\r\n      reset: true,\r\n      \"reset-to-start\": true,\r\n      gyroscope: true,\r\n      gyroscopeMinAngleX: -45,\r\n      gyroscopeMaxAngleX: 45,\r\n      gyroscopeMinAngleY: -45,\r\n      gyroscopeMaxAngleY: 45,\r\n      gyroscopeSamples: 10\r\n    };\r\n\r\n    let newSettings = {};\r\n    for (var property in defaultSettings) {\r\n      if (property in settings) {\r\n        newSettings[property] = settings[property];\r\n      } else if (this.element.hasAttribute(\"data-tilt-\" + property)) {\r\n        let attribute = this.element.getAttribute(\"data-tilt-\" + property);\r\n        try {\r\n          newSettings[property] = JSON.parse(attribute);\r\n        } catch (e) {\r\n          newSettings[property] = attribute;\r\n        }\r\n\r\n      } else {\r\n        newSettings[property] = defaultSettings[property];\r\n      }\r\n    }\r\n\r\n    return newSettings;\r\n  }\r\n\r\n  static init(elements, settings) {\r\n    if (elements instanceof Node) {\r\n      elements = [elements];\r\n    }\r\n\r\n    if (elements instanceof NodeList) {\r\n      elements = [].slice.call(elements);\r\n    }\r\n\r\n    if (!(elements instanceof Array)) {\r\n      return;\r\n    }\r\n\r\n    elements.forEach((element) => {\r\n      if (!(\"vanillaTilt\" in element)) {\r\n        element.vanillaTilt = new VanillaTilt(element, settings);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nif (typeof document !== \"undefined\") {\r\n  /* expose the class to window */\r\n  window.VanillaTilt = VanillaTilt;\r\n\r\n  /**\r\n   * Auto load\r\n   */\r\n  VanillaTilt.init(document.querySelectorAll(\"[data-tilt]\"));\r\n}\n\nreturn VanillaTilt;\n\n}());\n"],"names":["VanillaTilt","constructor","element","settings","Node","width","height","clientWidth","clientHeight","left","top","gammazero","betazero","lastgammazero","lastbetazero","transitionTimeout","updateCall","event","updateBind","update","bind","resetBind","reset","extendSettings","reverse","resetToStart","isSettingTrue","glare","glarePrerender","fullPageListening","gyroscope","gyroscopeSamples","elementListener","getElementListener","prepareGlare","updateClientSize","addEventListeners","startX","startY","setting","window","document","mouseEventElement","querySelector","onMouseEnterBind","onMouseEnter","onMouseMoveBind","onMouseMove","onMouseLeaveBind","onMouseLeave","onWindowResizeBind","onWindowResize","onDeviceOrientationBind","onDeviceOrientation","addEventListener","removeEventListeners","removeEventListener","destroy","clearTimeout","cancelAnimationFrame","style","willChange","transition","transform","resetGlare","vanillaTilt","gamma","beta","updateElementPosition","totalAngleX","gyroscopeMaxAngleX","gyroscopeMinAngleX","totalAngleY","gyroscopeMaxAngleY","gyroscopeMinAngleY","degreesPerPixelX","degreesPerPixelY","angleX","angleY","clientX","posX","clientY","posY","requestAnimationFrame","setTransition","max","backupScale","scale","glareElement","opacity","getValues","x","y","Math","min","tiltX","toFixed","tiltY","percentageX","percentageY","angle","atan2","PI","rect","getBoundingClientRect","offsetWidth","offsetHeight","values","perspective","axis","dispatchEvent","CustomEvent","jsTiltGlare","createElement","classList","add","jsTiltGlareInner","appendChild","glareElementWrapper","Object","assign","updateGlareSize","glareSize","innerWidth","documentElement","body","innerHeight","speed","easing","setTimeout","defaultSettings","newSettings","property","hasAttribute","attribute","getAttribute","JSON","parse","e","init","elements","NodeList","slice","call","Array","forEach","querySelectorAll"],"version":3,"file":"index.0431c69b.js.map"}